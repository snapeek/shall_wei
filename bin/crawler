#!/usr/bin/env ruby
require 'colorize'

require File.expand_path("../../app/crawlers/weibo_crawl", __FILE__)
require File.expand_path("../../app/crawlers/oops_crawl", __FILE__)
require File.expand_path("../../lib/nlpir", __FILE__)
@kibers = {}
@oops = OopsCrawl.new
def weibo
  @weibo ||= WeiboCrawl.new
end

def list
  Keyword.active.each_with_index{|k, i| puts "#{i}. #{k.content} #{k.weibos.count}"}
end

def new_keyword
  print "请输入要搜索的关键字:\n>"
  cts = gets.chomp
  print "起始时间(YYYY-MM-DD):\n>"
  st = gets.chomp
  print "结束时间(YYYY-MM-DD):\n>"
  et = gets.chomp
  cts.split(',').each do |ct|
    puts "请确定(Y/n)\n#{ct}\n#{st}\n#{et}\n"
    kw = Keyword.create(content: ct, starttime: Time.parse(st), endtime: Time.parse(et))
    search(kw)
  end
end

def export
  a = list
  print "要导出哪一项(多个请用逗号分隔,全部导出输入'#{"a".colorize(:green)}')?\n>"
  sl = gets.chomp
  return a.each{|a| a.w_to_csv } if sl == "a"
  sl.scan(/\d{1,2}/).each do |s|
    a.to_a[s.to_i].try :w_to_csv
  end
  print "导出完毕."
end

def search(kw = nil)
  if kw.nil?
    a = list
    print "要搜索哪一项?\n>"
    kw = a.to_a[gets.chomp.to_i]    
  end
  while true
    lks = list_kibers(kw)
    print "\n启用哪一条线程(多个请用逗号分隔,全部开始输入'#{"a".colorize(:green)}', 新建线程输入'#{"n".colorize(:green)}')?\n>"
    sl = gets.chomp
    case sl
    when "a" then lks.each{|lk| kiber_up(kw, lk); sleep(15) }
    when "n" then new_kiber(kw)
    when "e" then break
    else
      sl.scan(/\d{1,2}/).each do |s|
        kiber_up(kw, lks.to_a[s.to_i])
        sleep(5)
        puts "OK!".colorize(:red)
      end
    end
  end
end

def new_kiber(kw)
  print "设定本线程 开始时间 (默认#{Time.at(kw.starttime).strftime("%F").colorize(:red)})\n>"
  st = gets.chomp
  st = st.present? ? Time.parse(st).to_i : kw.starttime
  print "设定本线程 结束时间 (默认#{Time.at(kw.endtime).strftime("%F").colorize(:red)})\n>"
  et = gets.chomp
  et = et.present? ? Time.parse(et).to_i : kw.endtime
  print "设定本线程 搜索跨度 (默认#{"24".colorize(:red)}小时)\n>"
  gap = gets.chomp.to_i
  gap = gap > 0 ? gap : 24
  print "备注:\n>"
  mark = gets.chomp
  kb = kw.kibers.create(
    :starttime => st,
    :crdtime   => st,
    :endtime   => et,
    :gap       => gap,
    :mark      => mark
    )
end

def kiber_up(kw, kb)
  tf = Thread.fork do
    kb.is_active = true
    kb.save    
    wc = WeiboCrawl.new
    do_search(kb, wc)
  end
  if @kibers[kw.id]
    @kibers[kw.id][:kibers] << tf
  else
    @kibers[kw.id] = {
      :keyword => kw,
      :kibers => [tf]
    }
  end 
  print "初始化.....".colorize(:red)
end

def do_search(kb, wc)
  while true
    break if kb.crdtime > kb.endtime
    wc.search(
      keyword: kb.keyword.content, 
      page: kb.page , 
      starttime: kb.starttime, 
      endtime: kb.crdtime + kb.gap.hours, 
      xsort: false, 
      ori: true,
      kid: kb.id)
    kb.crdtime += kb.gap.hours
    kb.page = 1
  end
  kb.is_active = false
  kb.status = kb.status | 4
  kb.save
end


def list_kibers(kw)
  puts "当前关键字搜索的线程有:"
  puts "  开始时间   结束时间   当前时间   搜索跨度(小时)"
  kw.kibers.each_with_index do |kb, i|
    st = Time.at(kb.starttime).strftime("%F")
    et = Time.at(kb.endtime).strftime("%F")
    ct = Time.at(kb.crdtime).strftime("%F")
    gap = kb.gap
    if kb.is_active
      puts "#{i} #{st} #{et} #{ct}     #{gap}".colorize(:blue)
    elsif kb.created_at && kb.created_at + 3.minutes > Time.now
      puts "#{i} #{st} #{et} #{ct}     #{gap}".colorize(:green)
    else
      puts "#{i} #{st} #{et} #{ct}     #{gap}"
    end
  end  
end

def h
  puts "
  # ==============================================
  #
  #       新建关键词 new_keyword keyword | options
  #       列出关键词 list
  #       开始搜索   search
  #       导出      export 
  #       退出      ctrl + c[d] or exit!
  #
  # ==============================================
  "
end
h
pry